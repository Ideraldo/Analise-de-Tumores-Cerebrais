# -*- coding: utf-8 -*-
"""GlobalSolution - Versao Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z7fgjECHwuX7pMMAXV0wLM8xAx0pmA3K

# Preparação Inicial:
"""

# Importação das bibliotecas necessárias
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')

"""# Carregamento do Conjunto de Dados:"""

# Carregamento do dataset
train_datagen = ImageDataGenerator(rescale=1./255)
train_data = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/GlobalSolution/TrainingUpdated',
    target_size=(160, 160),
    batch_size=32,
    class_mode='binary'
)

test_datagen = ImageDataGenerator(rescale=1./255)
test_data = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/GlobalSolution/TestingUpdated',
    target_size=(160, 160),
    batch_size=32,
    class_mode='binary'
)

"""# Exploração de Dados:"""

# Exibição de informações sobre o conjunto de dados
print(f"Número de amostras de treinamento: {train_data.samples}")
print(f"Número de amostras de teste: {test_data.samples}")
print(f"Número de classes: {len(train_data.class_indices)}")
print(f"Tamanho das imagens: {train_data.image_shape}")

# Visualização de algumas imagens do conjunto de treinamento
def visualize_train_images(train_data):
    plt.figure(figsize=(10, 10))
    for i in range(9):
        images, _ = next(train_data)  # Obtendo um lote de imagens
        for j in range(9):
            plt.subplot(3, 3, j + 1)
            plt.imshow(images[j])
            plt.axis('off')
    plt.show()

visualize_train_images(train_data)

"""# Pré-processamento:

Este passo está embutido no ImageDataGenerator com a opção rescale=1./255, utilizado na hora da importação do conjunto de dados

# Criação do Modelo:
"""

# Configuração do modelo
IMG_SHAPE = (160, 160, 3)
base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE, include_top=False, weights='imagenet')
base_model.trainable = False
global_average_layer = tf.keras.layers.GlobalAveragePooling2D()
prediction_layer = keras.layers.Dense(1, activation='sigmoid')

model = tf.keras.Sequential([
    base_model,
    global_average_layer,
    prediction_layer
])

"""# Compilação do Modelo:"""

# Compilação do modelo
base_learning_rate = 0.0001
model.compile(
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=base_learning_rate),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

"""# Treinamento do Modelo:"""

# Treinamento do modelo
initial_epochs = 10
history = model.fit(
    train_data,
    epochs=initial_epochs,
    validation_data=test_data
)

# Função para exibir o histórico de treino do modelo
def plot_history(history):
    plt.figure(figsize=(20, 10))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.xlabel('epoch')
    plt.legend(['loss', 'val_loss'], loc='lower left')

    plt.subplot(1, 2, 2)
    plt.plot(history.history['accuracy'])
    plt.plot(history.history['val_accuracy'])
    plt.xlabel('epoch')
    plt.legend(['acc', 'val_acc'], loc='upper left')
    plt.show()

plot_history(history)

"""# Avaliação do Modelo:"""

# Avaliação do modelo com o conjunto de teste
loss, accuracy = model.evaluate(test_data)
print(f"Acurácia do teste: {accuracy*100}%")

"""# Teste com Imagens da Internet:"""

import os
from keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Função para carregar e pré-processar uma imagem
def load_and_prepare_image(img_path):
    img = image.load_img(img_path, target_size=(160, 160))
    img_array = image.img_to_array(img)
    img_array_expanded = np.expand_dims(img_array, axis=0)
    return img_array_expanded / 255.0

# Caminhos para as pastas no seu Google Drive

path_to_tumor = '/content/drive/MyDrive/GlobalSolution/TesteComTumor'
path_to_notumor = '/content/drive/MyDrive/GlobalSolution/TesteSemTumor'

# Carregar e preparar as imagens
image_tumor = load_and_prepare_image(os.path.join(path_to_tumor, os.listdir(path_to_tumor)[0]))
image_notumor = load_and_prepare_image(os.path.join(path_to_notumor, os.listdir(path_to_notumor)[0]))

# Fazer as previsões
prediction_tumor = model.predict(image_tumor)
prediction_notumor = model.predict(image_notumor)

# Exibir as imagens e previsões
plt.figure(figsize=(8, 4))

plt.subplot(1, 2, 1)
plt.imshow(image_tumor[0])
plt.title(f'Tumor: {"Presente" if prediction_tumor[0] > 0.5 else "Ausente"}')

plt.subplot(1, 2, 2)
plt.imshow(image_notumor[0])
plt.title(f'Tumor: {"Presente" if prediction_notumor[0] > 0.5 else "Ausente"}')

plt.show()